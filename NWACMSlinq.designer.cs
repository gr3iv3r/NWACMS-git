#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NWACMS
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NWACMS")]
	public partial class NWACMSlinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertacknowledged(acknowledged instance);
    partial void Updateacknowledged(acknowledged instance);
    partial void Deleteacknowledged(acknowledged instance);
    partial void InsertWorkorder(Workorder instance);
    partial void UpdateWorkorder(Workorder instance);
    partial void DeleteWorkorder(Workorder instance);
    partial void Insertapproved_By(approved_By instance);
    partial void Updateapproved_By(approved_By instance);
    partial void Deleteapproved_By(approved_By instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertComplaint(Complaint instance);
    partial void UpdateComplaint(Complaint instance);
    partial void DeleteComplaint(Complaint instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertInbox(Inbox instance);
    partial void UpdateInbox(Inbox instance);
    partial void DeleteInbox(Inbox instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void Insertlog(log instance);
    partial void Updatelog(log instance);
    partial void Deletelog(log instance);
    partial void InsertParish(Parish instance);
    partial void UpdateParish(Parish instance);
    partial void DeleteParish(Parish instance);
    partial void InsertRemark(Remark instance);
    partial void UpdateRemark(Remark instance);
    partial void DeleteRemark(Remark instance);
    partial void InsertSent(Sent instance);
    partial void UpdateSent(Sent instance);
    partial void DeleteSent(Sent instance);
    partial void InsertSubcategory(Subcategory instance);
    partial void UpdateSubcategory(Subcategory instance);
    partial void DeleteSubcategory(Subcategory instance);
    partial void InsertType(Type instance);
    partial void UpdateType(Type instance);
    partial void DeleteType(Type instance);
    partial void InsertUnit(Unit instance);
    partial void UpdateUnit(Unit instance);
    partial void DeleteUnit(Unit instance);
    #endregion
		
		public NWACMSlinqDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["NWACMSConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NWACMSlinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NWACMSlinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NWACMSlinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NWACMSlinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<acknowledged> acknowledgeds
		{
			get
			{
				return this.GetTable<acknowledged>();
			}
		}
		
		public System.Data.Linq.Table<Workorder> Workorders
		{
			get
			{
				return this.GetTable<Workorder>();
			}
		}
		
		public System.Data.Linq.Table<approved_By> approved_Bies
		{
			get
			{
				return this.GetTable<approved_By>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Complaint> Complaints
		{
			get
			{
				return this.GetTable<Complaint>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Inbox> Inboxes
		{
			get
			{
				return this.GetTable<Inbox>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<log> logs
		{
			get
			{
				return this.GetTable<log>();
			}
		}
		
		public System.Data.Linq.Table<Parish> Parishes
		{
			get
			{
				return this.GetTable<Parish>();
			}
		}
		
		public System.Data.Linq.Table<Remark> Remarks
		{
			get
			{
				return this.GetTable<Remark>();
			}
		}
		
		public System.Data.Linq.Table<Sent> Sents
		{
			get
			{
				return this.GetTable<Sent>();
			}
		}
		
		public System.Data.Linq.Table<Subcategory> Subcategories
		{
			get
			{
				return this.GetTable<Subcategory>();
			}
		}
		
		public System.Data.Linq.Table<Type> Types
		{
			get
			{
				return this.GetTable<Type>();
			}
		}
		
		public System.Data.Linq.Table<Unit> Units
		{
			get
			{
				return this.GetTable<Unit>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.seen_Who")]
		public ISingleResult<seen_WhoResult> seen_Who([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> track_no)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), track_no);
			return ((ISingleResult<seen_WhoResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.addInbox")]
		public int addInbox([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> comp_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallDateTime")] System.Nullable<System.DateTime> date_recieved, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string role)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), comp_ID, date_recieved, role);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.addUser")]
		public int addUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string fname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string lname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string contact, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string title, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> dept, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string role)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fname, lname, contact, email, title, dept, role);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.addRemark")]
		public int addRemark([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(266)")] string remark, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> comp_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallDateTime")] System.Nullable<System.DateTime> date_recieved)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), remark, comp_ID, email, date_recieved);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.setPriority")]
		public int setPriority([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> track_no, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string priority)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), track_no, priority);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.resolved_Who")]
		public ISingleResult<resolved_WhoResult> resolved_Who([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> track_no, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string emp_Name, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string title, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string dep_Name, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallDateTime")] ref System.Nullable<System.DateTime> date_resolved)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), track_no, emp_Name, title, dep_Name, date_resolved);
			emp_Name = ((string)(result.GetParameterValue(1)));
			title = ((string)(result.GetParameterValue(2)));
			dep_Name = ((string)(result.GetParameterValue(3)));
			date_resolved = ((System.Nullable<System.DateTime>)(result.GetParameterValue(4)));
			return ((ISingleResult<resolved_WhoResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.confirm_Request")]
		public int confirm_Request([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> track_no, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> request_Action)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), track_no, request_Action);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.confirm_Status")]
		public int confirm_Status([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> track_no, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> confirmStatus)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), track_no, confirmStatus);
			confirmStatus = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.addComplaint")]
		public int addComplaint([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(30)")] string fname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(30)")] string lname, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(30)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(30)")] string contact, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> subcategory, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> parish, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string street, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallDateTime")] System.Nullable<System.DateTime> date_resolved, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> comp_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> track_no, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(30)")] string isResolved, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string submitted_By)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fname, lname, email, contact, subcategory, parish, street, description, date_resolved, comp_ID, track_no, isResolved, submitted_By);
			comp_ID = ((System.Nullable<int>)(result.GetParameterValue(9)));
			track_no = ((System.Nullable<int>)(result.GetParameterValue(10)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.resovle_This")]
		public int resovle_This([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> track_no, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallDateTime")] System.Nullable<System.DateTime> date_resolved, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string isResolved)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), track_no, email, date_resolved, isResolved);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.complaintDetails")]
		public int complaintDetails(
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> track_no, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> comp_ID, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallDateTime")] ref System.Nullable<System.DateTime> date_resolved, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Descrip", DbType="NVarChar(500)")] ref string descrip, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string address1, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string isResolved, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Priority", DbType="NVarChar(50)")] ref string priority, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string firstName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string lastName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string email, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string contact_No, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallDateTime")] ref System.Nullable<System.DateTime> inboxDate_recieved, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string cat_Name, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string sub_Name, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string parish, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallDateTime")] ref System.Nullable<System.DateTime> date_seen, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string submitted_By, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string submit_Title, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string submit_Dept, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string emp_fName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string emp_lName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ResolvedConfirmed", DbType="Int")] ref System.Nullable<int> resolvedConfirmed, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ResolvedConfirmed_BY", DbType="Int")] ref System.Nullable<int> resolvedConfirmed_BY, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> inbox_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), track_no, comp_ID, date_resolved, descrip, address1, isResolved, priority, firstName, lastName, email, contact_No, inboxDate_recieved, cat_Name, sub_Name, parish, date_seen, submitted_By, submit_Title, submit_Dept, emp_fName, emp_lName, resolvedConfirmed, resolvedConfirmed_BY, inbox_ID);
			comp_ID = ((System.Nullable<int>)(result.GetParameterValue(1)));
			date_resolved = ((System.Nullable<System.DateTime>)(result.GetParameterValue(2)));
			descrip = ((string)(result.GetParameterValue(3)));
			address1 = ((string)(result.GetParameterValue(4)));
			isResolved = ((string)(result.GetParameterValue(5)));
			priority = ((string)(result.GetParameterValue(6)));
			firstName = ((string)(result.GetParameterValue(7)));
			lastName = ((string)(result.GetParameterValue(8)));
			email = ((string)(result.GetParameterValue(9)));
			contact_No = ((string)(result.GetParameterValue(10)));
			inboxDate_recieved = ((System.Nullable<System.DateTime>)(result.GetParameterValue(11)));
			cat_Name = ((string)(result.GetParameterValue(12)));
			sub_Name = ((string)(result.GetParameterValue(13)));
			parish = ((string)(result.GetParameterValue(14)));
			date_seen = ((System.Nullable<System.DateTime>)(result.GetParameterValue(15)));
			submitted_By = ((string)(result.GetParameterValue(16)));
			submit_Title = ((string)(result.GetParameterValue(17)));
			submit_Dept = ((string)(result.GetParameterValue(18)));
			emp_fName = ((string)(result.GetParameterValue(19)));
			emp_lName = ((string)(result.GetParameterValue(20)));
			resolvedConfirmed = ((System.Nullable<int>)(result.GetParameterValue(21)));
			resolvedConfirmed_BY = ((System.Nullable<int>)(result.GetParameterValue(22)));
			inbox_ID = ((System.Nullable<int>)(result.GetParameterValue(23)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.seen_By")]
		public int seen_By([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> inbox_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallDateTime")] System.Nullable<System.DateTime> date_seen)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), email, inbox_ID, date_seen);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getWo_ID")]
		public int getWo_ID([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> track_no, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> workorder_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), track_no, workorder_ID);
			workorder_ID = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ModWrkItem")]
		public int ModWrkItem([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> workorder_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string item, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(300)")] string desc, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> quant, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,0)")] System.Nullable<decimal> rate, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,0)")] System.Nullable<decimal> amount, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,0)")] System.Nullable<decimal> total, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> unit_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> inStore)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), workorder_ID, item, desc, quant, rate, amount, total, unit_ID, inStore);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ModWrkTitle")]
		public int ModWrkTitle([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> track_no, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string title, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallDateTime")] System.Nullable<System.DateTime> date_recieved, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> parish_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> workorder_Id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), track_no, title, date_recieved, email, parish_ID, workorder_Id);
			workorder_Id = ((System.Nullable<int>)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.checkApproved_By")]
		public int checkApproved_By([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> workorder_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> res)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), workorder_Id, res);
			res = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.addWrkTitle")]
		public int addWrkTitle([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> track_no, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string title, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallDateTime")] System.Nullable<System.DateTime> date_recieved, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string parish, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> workorder_Id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), track_no, title, date_recieved, email, parish, workorder_Id);
			workorder_Id = ((System.Nullable<int>)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.addWrkItem")]
		public int addWrkItem([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> workorder_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(150)")] string item, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(300)")] string desc, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> quant, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,0)")] System.Nullable<decimal> rate, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,0)")] System.Nullable<decimal> amount, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> unit_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> inStore)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), workorder_ID, item, desc, quant, rate, amount, unit_ID, inStore);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.calcWoCost")]
		public int calcWoCost([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> workorder_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), workorder_ID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.approveWO", IsComposable=true)]
		public object approveWO([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> workorder_Id)
		{
			return ((object)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), email, workorder_Id).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getIfApproved_By")]
		public int getIfApproved_By([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> workorder_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> res)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), email, workorder_Id, res);
			res = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.setFullyApproved")]
		public int setFullyApproved([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> workorder_Id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), workorder_Id);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getWoDetails")]
		public int getWoDetails([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> track_no, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> workorder_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string email, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string title, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string woTitle, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="SmallDateTime")] ref System.Nullable<System.DateTime> date_recieved, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] ref string parish, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cost", DbType="Decimal(18,0)")] ref System.Nullable<decimal> cost, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] ref System.Nullable<bool> completed)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), track_no, workorder_ID, email, title, woTitle, date_recieved, parish, cost, completed);
			workorder_ID = ((System.Nullable<int>)(result.GetParameterValue(1)));
			email = ((string)(result.GetParameterValue(2)));
			title = ((string)(result.GetParameterValue(3)));
			woTitle = ((string)(result.GetParameterValue(4)));
			date_recieved = ((System.Nullable<System.DateTime>)(result.GetParameterValue(5)));
			parish = ((string)(result.GetParameterValue(6)));
			cost = ((System.Nullable<decimal>)(result.GetParameterValue(7)));
			completed = ((System.Nullable<bool>)(result.GetParameterValue(8)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getApproved_By")]
		public int getApproved_By([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> workorder_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Manager_approved", DbType="NVarChar(50)")] ref string manager_approved, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Director_approved", DbType="NVarChar(50)")] ref string director_approved, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SrDirector_approved", DbType="NVarChar(50)")] ref string srDirector_approved, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Ceo_approved", DbType="NVarChar(50)")] ref string ceo_approved, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] ref System.Nullable<bool> fullyApproved)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), workorder_Id, manager_approved, director_approved, srDirector_approved, ceo_approved, fullyApproved);
			manager_approved = ((string)(result.GetParameterValue(1)));
			director_approved = ((string)(result.GetParameterValue(2)));
			srDirector_approved = ((string)(result.GetParameterValue(3)));
			ceo_approved = ((string)(result.GetParameterValue(4)));
			fullyApproved = ((System.Nullable<bool>)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.setWoFinish")]
		public int setWoFinish([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> workorder_Id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> completed)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), workorder_Id, completed);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getIfCompExist")]
		public int getIfCompExist([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> track_no, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> res)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), track_no, res);
			res = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.acknowledged")]
	public partial class acknowledged : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _inbox_ID;
		
		private System.Nullable<int> _emp_ID;
		
		private System.Nullable<System.DateTime> _date_seen;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Inbox> _Inbox;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Oninbox_IDChanging(int value);
    partial void Oninbox_IDChanged();
    partial void Onemp_IDChanging(System.Nullable<int> value);
    partial void Onemp_IDChanged();
    partial void Ondate_seenChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_seenChanged();
    #endregion
		
		public acknowledged()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Inbox = default(EntityRef<Inbox>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inbox_ID", DbType="Int NOT NULL")]
		public int inbox_ID
		{
			get
			{
				return this._inbox_ID;
			}
			set
			{
				if ((this._inbox_ID != value))
				{
					if (this._Inbox.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oninbox_IDChanging(value);
					this.SendPropertyChanging();
					this._inbox_ID = value;
					this.SendPropertyChanged("inbox_ID");
					this.Oninbox_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emp_ID", DbType="Int")]
		public System.Nullable<int> emp_ID
		{
			get
			{
				return this._emp_ID;
			}
			set
			{
				if ((this._emp_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onemp_IDChanging(value);
					this.SendPropertyChanging();
					this._emp_ID = value;
					this.SendPropertyChanged("emp_ID");
					this.Onemp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_seen", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> date_seen
		{
			get
			{
				return this._date_seen;
			}
			set
			{
				if ((this._date_seen != value))
				{
					this.Ondate_seenChanging(value);
					this.SendPropertyChanging();
					this._date_seen = value;
					this.SendPropertyChanged("date_seen");
					this.Ondate_seenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_acknowledged", Storage="_Employee", ThisKey="emp_ID", OtherKey="emp_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.acknowledgeds.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.acknowledgeds.Add(this);
						this._emp_ID = value.emp_ID;
					}
					else
					{
						this._emp_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inbox_acknowledged", Storage="_Inbox", ThisKey="inbox_ID", OtherKey="inbox_ID", IsForeignKey=true)]
		public Inbox Inbox
		{
			get
			{
				return this._Inbox.Entity;
			}
			set
			{
				Inbox previousValue = this._Inbox.Entity;
				if (((previousValue != value) 
							|| (this._Inbox.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inbox.Entity = null;
						previousValue.acknowledgeds.Remove(this);
					}
					this._Inbox.Entity = value;
					if ((value != null))
					{
						value.acknowledgeds.Add(this);
						this._inbox_ID = value.inbox_ID;
					}
					else
					{
						this._inbox_ID = default(int);
					}
					this.SendPropertyChanged("Inbox");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Workorder")]
	public partial class Workorder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _workorder_Id;
		
		private int _comp_ID;
		
		private int _emp_ID;
		
		private string _Title;
		
		private System.DateTime _date_recieved;
		
		private int _Parish_ID;
		
		private System.Nullable<decimal> _Cost;
		
		private EntitySet<approved_By> _approved_Bies;
		
		private EntitySet<Item> _Items;
		
		private EntityRef<Complaint> _Complaint;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Parish> _Parish;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onworkorder_IdChanging(int value);
    partial void Onworkorder_IdChanged();
    partial void Oncomp_IDChanging(int value);
    partial void Oncomp_IDChanged();
    partial void Onemp_IDChanging(int value);
    partial void Onemp_IDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void Ondate_recievedChanging(System.DateTime value);
    partial void Ondate_recievedChanged();
    partial void OnParish_IDChanging(int value);
    partial void OnParish_IDChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    #endregion
		
		public Workorder()
		{
			this._approved_Bies = new EntitySet<approved_By>(new Action<approved_By>(this.attach_approved_Bies), new Action<approved_By>(this.detach_approved_Bies));
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._Complaint = default(EntityRef<Complaint>);
			this._Employee = default(EntityRef<Employee>);
			this._Parish = default(EntityRef<Parish>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workorder_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int workorder_Id
		{
			get
			{
				return this._workorder_Id;
			}
			set
			{
				if ((this._workorder_Id != value))
				{
					this.Onworkorder_IdChanging(value);
					this.SendPropertyChanging();
					this._workorder_Id = value;
					this.SendPropertyChanged("workorder_Id");
					this.Onworkorder_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comp_ID", DbType="Int NOT NULL")]
		public int comp_ID
		{
			get
			{
				return this._comp_ID;
			}
			set
			{
				if ((this._comp_ID != value))
				{
					if (this._Complaint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncomp_IDChanging(value);
					this.SendPropertyChanging();
					this._comp_ID = value;
					this.SendPropertyChanged("comp_ID");
					this.Oncomp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emp_ID", DbType="Int NOT NULL")]
		public int emp_ID
		{
			get
			{
				return this._emp_ID;
			}
			set
			{
				if ((this._emp_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onemp_IDChanging(value);
					this.SendPropertyChanging();
					this._emp_ID = value;
					this.SendPropertyChanged("emp_ID");
					this.Onemp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_recieved", DbType="SmallDateTime NOT NULL")]
		public System.DateTime date_recieved
		{
			get
			{
				return this._date_recieved;
			}
			set
			{
				if ((this._date_recieved != value))
				{
					this.Ondate_recievedChanging(value);
					this.SendPropertyChanging();
					this._date_recieved = value;
					this.SendPropertyChanged("date_recieved");
					this.Ondate_recievedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parish_ID", DbType="Int NOT NULL")]
		public int Parish_ID
		{
			get
			{
				return this._Parish_ID;
			}
			set
			{
				if ((this._Parish_ID != value))
				{
					if (this._Parish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParish_IDChanging(value);
					this.SendPropertyChanging();
					this._Parish_ID = value;
					this.SendPropertyChanged("Parish_ID");
					this.OnParish_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workorder_approved_By", Storage="_approved_Bies", ThisKey="workorder_Id", OtherKey="workorder_Id")]
		public EntitySet<approved_By> approved_Bies
		{
			get
			{
				return this._approved_Bies;
			}
			set
			{
				this._approved_Bies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workorder_Item", Storage="_Items", ThisKey="workorder_Id", OtherKey="workorder_Id")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Complaint_Workorder", Storage="_Complaint", ThisKey="comp_ID", OtherKey="comp_ID", IsForeignKey=true)]
		public Complaint Complaint
		{
			get
			{
				return this._Complaint.Entity;
			}
			set
			{
				Complaint previousValue = this._Complaint.Entity;
				if (((previousValue != value) 
							|| (this._Complaint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Complaint.Entity = null;
						previousValue.Workorders.Remove(this);
					}
					this._Complaint.Entity = value;
					if ((value != null))
					{
						value.Workorders.Add(this);
						this._comp_ID = value.comp_ID;
					}
					else
					{
						this._comp_ID = default(int);
					}
					this.SendPropertyChanged("Complaint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Workorder", Storage="_Employee", ThisKey="emp_ID", OtherKey="emp_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Workorders.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Workorders.Add(this);
						this._emp_ID = value.emp_ID;
					}
					else
					{
						this._emp_ID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parish_Workorder", Storage="_Parish", ThisKey="Parish_ID", OtherKey="parish_ID", IsForeignKey=true)]
		public Parish Parish
		{
			get
			{
				return this._Parish.Entity;
			}
			set
			{
				Parish previousValue = this._Parish.Entity;
				if (((previousValue != value) 
							|| (this._Parish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parish.Entity = null;
						previousValue.Workorders.Remove(this);
					}
					this._Parish.Entity = value;
					if ((value != null))
					{
						value.Workorders.Add(this);
						this._Parish_ID = value.parish_ID;
					}
					else
					{
						this._Parish_ID = default(int);
					}
					this.SendPropertyChanged("Parish");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_approved_Bies(approved_By entity)
		{
			this.SendPropertyChanging();
			entity.Workorder = this;
		}
		
		private void detach_approved_Bies(approved_By entity)
		{
			this.SendPropertyChanging();
			entity.Workorder = null;
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Workorder = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Workorder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.approved_By")]
	public partial class approved_By : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _approve_Id;
		
		private System.Nullable<int> _emp_ID;
		
		private System.Nullable<System.DateTime> _date_approved;
		
		private System.Nullable<int> _workorder_Id;
		
		private EntityRef<Workorder> _Workorder;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onapprove_IdChanging(int value);
    partial void Onapprove_IdChanged();
    partial void Onemp_IDChanging(System.Nullable<int> value);
    partial void Onemp_IDChanged();
    partial void Ondate_approvedChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_approvedChanged();
    partial void Onworkorder_IdChanging(System.Nullable<int> value);
    partial void Onworkorder_IdChanged();
    #endregion
		
		public approved_By()
		{
			this._Workorder = default(EntityRef<Workorder>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_approve_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int approve_Id
		{
			get
			{
				return this._approve_Id;
			}
			set
			{
				if ((this._approve_Id != value))
				{
					this.Onapprove_IdChanging(value);
					this.SendPropertyChanging();
					this._approve_Id = value;
					this.SendPropertyChanged("approve_Id");
					this.Onapprove_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emp_ID", DbType="Int")]
		public System.Nullable<int> emp_ID
		{
			get
			{
				return this._emp_ID;
			}
			set
			{
				if ((this._emp_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onemp_IDChanging(value);
					this.SendPropertyChanging();
					this._emp_ID = value;
					this.SendPropertyChanged("emp_ID");
					this.Onemp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_approved", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> date_approved
		{
			get
			{
				return this._date_approved;
			}
			set
			{
				if ((this._date_approved != value))
				{
					this.Ondate_approvedChanging(value);
					this.SendPropertyChanging();
					this._date_approved = value;
					this.SendPropertyChanged("date_approved");
					this.Ondate_approvedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workorder_Id", DbType="Int")]
		public System.Nullable<int> workorder_Id
		{
			get
			{
				return this._workorder_Id;
			}
			set
			{
				if ((this._workorder_Id != value))
				{
					if (this._Workorder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onworkorder_IdChanging(value);
					this.SendPropertyChanging();
					this._workorder_Id = value;
					this.SendPropertyChanged("workorder_Id");
					this.Onworkorder_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workorder_approved_By", Storage="_Workorder", ThisKey="workorder_Id", OtherKey="workorder_Id", IsForeignKey=true)]
		public Workorder Workorder
		{
			get
			{
				return this._Workorder.Entity;
			}
			set
			{
				Workorder previousValue = this._Workorder.Entity;
				if (((previousValue != value) 
							|| (this._Workorder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workorder.Entity = null;
						previousValue.approved_Bies.Remove(this);
					}
					this._Workorder.Entity = value;
					if ((value != null))
					{
						value.approved_Bies.Add(this);
						this._workorder_Id = value.workorder_Id;
					}
					else
					{
						this._workorder_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Workorder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_approved_By", Storage="_Employee", ThisKey="emp_ID", OtherKey="emp_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.approved_Bies.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.approved_Bies.Add(this);
						this._emp_ID = value.emp_ID;
					}
					else
					{
						this._emp_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cat_Id;
		
		private string _cat_Name;
		
		private int _dep_Id;
		
		private EntitySet<Subcategory> _Subcategories;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncat_IdChanging(int value);
    partial void Oncat_IdChanged();
    partial void Oncat_NameChanging(string value);
    partial void Oncat_NameChanged();
    partial void Ondep_IdChanging(int value);
    partial void Ondep_IdChanged();
    #endregion
		
		public Category()
		{
			this._Subcategories = new EntitySet<Subcategory>(new Action<Subcategory>(this.attach_Subcategories), new Action<Subcategory>(this.detach_Subcategories));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cat_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cat_Id
		{
			get
			{
				return this._cat_Id;
			}
			set
			{
				if ((this._cat_Id != value))
				{
					this.Oncat_IdChanging(value);
					this.SendPropertyChanging();
					this._cat_Id = value;
					this.SendPropertyChanged("cat_Id");
					this.Oncat_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cat_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string cat_Name
		{
			get
			{
				return this._cat_Name;
			}
			set
			{
				if ((this._cat_Name != value))
				{
					this.Oncat_NameChanging(value);
					this.SendPropertyChanging();
					this._cat_Name = value;
					this.SendPropertyChanged("cat_Name");
					this.Oncat_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dep_Id", DbType="Int NOT NULL")]
		public int dep_Id
		{
			get
			{
				return this._dep_Id;
			}
			set
			{
				if ((this._dep_Id != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondep_IdChanging(value);
					this.SendPropertyChanging();
					this._dep_Id = value;
					this.SendPropertyChanged("dep_Id");
					this.Ondep_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Subcategory", Storage="_Subcategories", ThisKey="cat_Id", OtherKey="cat_Id")]
		public EntitySet<Subcategory> Subcategories
		{
			get
			{
				return this._Subcategories;
			}
			set
			{
				this._Subcategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Category", Storage="_Department", ThisKey="dep_Id", OtherKey="dep_Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._dep_Id = value.dep_Id;
					}
					else
					{
						this._dep_Id = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subcategories(Subcategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Subcategories(Subcategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Complaint")]
	public partial class Complaint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _comp_ID;
		
		private int _cus_ID;
		
		private System.Nullable<System.DateTime> _date_resolved;
		
		private string _Descrip;
		
		private string _address1;
		
		private string _address2;
		
		private int _parish_ID;
		
		private System.Nullable<int> _emp_ID;
		
		private string _isResolved;
		
		private int _sub_Id;
		
		private int _track_no;
		
		private string _Priority;
		
		private string _submitted_By;
		
		private System.Nullable<int> _ResolvedConfirmed;
		
		private System.Nullable<int> _ResolvedConfirmed_BY;
		
		private EntitySet<Workorder> _Workorders;
		
		private EntitySet<Inbox> _Inboxes;
		
		private EntitySet<Remark> _Remarks;
		
		private EntitySet<Sent> _Sents;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Parish> _Parish;
		
		private EntityRef<Subcategory> _Subcategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncomp_IDChanging(int value);
    partial void Oncomp_IDChanged();
    partial void Oncus_IDChanging(int value);
    partial void Oncus_IDChanged();
    partial void Ondate_resolvedChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_resolvedChanged();
    partial void OnDescripChanging(string value);
    partial void OnDescripChanged();
    partial void Onaddress1Changing(string value);
    partial void Onaddress1Changed();
    partial void Onaddress2Changing(string value);
    partial void Onaddress2Changed();
    partial void Onparish_IDChanging(int value);
    partial void Onparish_IDChanged();
    partial void Onemp_IDChanging(System.Nullable<int> value);
    partial void Onemp_IDChanged();
    partial void OnisResolvedChanging(string value);
    partial void OnisResolvedChanged();
    partial void Onsub_IdChanging(int value);
    partial void Onsub_IdChanged();
    partial void Ontrack_noChanging(int value);
    partial void Ontrack_noChanged();
    partial void OnPriorityChanging(string value);
    partial void OnPriorityChanged();
    partial void Onsubmitted_ByChanging(string value);
    partial void Onsubmitted_ByChanged();
    partial void OnResolvedConfirmedChanging(System.Nullable<int> value);
    partial void OnResolvedConfirmedChanged();
    partial void OnResolvedConfirmed_BYChanging(System.Nullable<int> value);
    partial void OnResolvedConfirmed_BYChanged();
    #endregion
		
		public Complaint()
		{
			this._Workorders = new EntitySet<Workorder>(new Action<Workorder>(this.attach_Workorders), new Action<Workorder>(this.detach_Workorders));
			this._Inboxes = new EntitySet<Inbox>(new Action<Inbox>(this.attach_Inboxes), new Action<Inbox>(this.detach_Inboxes));
			this._Remarks = new EntitySet<Remark>(new Action<Remark>(this.attach_Remarks), new Action<Remark>(this.detach_Remarks));
			this._Sents = new EntitySet<Sent>(new Action<Sent>(this.attach_Sents), new Action<Sent>(this.detach_Sents));
			this._Customer = default(EntityRef<Customer>);
			this._Parish = default(EntityRef<Parish>);
			this._Subcategory = default(EntityRef<Subcategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comp_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int comp_ID
		{
			get
			{
				return this._comp_ID;
			}
			set
			{
				if ((this._comp_ID != value))
				{
					this.Oncomp_IDChanging(value);
					this.SendPropertyChanging();
					this._comp_ID = value;
					this.SendPropertyChanged("comp_ID");
					this.Oncomp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cus_ID", DbType="Int NOT NULL")]
		public int cus_ID
		{
			get
			{
				return this._cus_ID;
			}
			set
			{
				if ((this._cus_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncus_IDChanging(value);
					this.SendPropertyChanging();
					this._cus_ID = value;
					this.SendPropertyChanged("cus_ID");
					this.Oncus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_resolved", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> date_resolved
		{
			get
			{
				return this._date_resolved;
			}
			set
			{
				if ((this._date_resolved != value))
				{
					this.Ondate_resolvedChanging(value);
					this.SendPropertyChanging();
					this._date_resolved = value;
					this.SendPropertyChanged("date_resolved");
					this.Ondate_resolvedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descrip", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Descrip
		{
			get
			{
				return this._Descrip;
			}
			set
			{
				if ((this._Descrip != value))
				{
					this.OnDescripChanging(value);
					this.SendPropertyChanging();
					this._Descrip = value;
					this.SendPropertyChanged("Descrip");
					this.OnDescripChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address1", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string address1
		{
			get
			{
				return this._address1;
			}
			set
			{
				if ((this._address1 != value))
				{
					this.Onaddress1Changing(value);
					this.SendPropertyChanging();
					this._address1 = value;
					this.SendPropertyChanged("address1");
					this.Onaddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address2", DbType="NVarChar(MAX)")]
		public string address2
		{
			get
			{
				return this._address2;
			}
			set
			{
				if ((this._address2 != value))
				{
					this.Onaddress2Changing(value);
					this.SendPropertyChanging();
					this._address2 = value;
					this.SendPropertyChanged("address2");
					this.Onaddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parish_ID", DbType="Int NOT NULL")]
		public int parish_ID
		{
			get
			{
				return this._parish_ID;
			}
			set
			{
				if ((this._parish_ID != value))
				{
					if (this._Parish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onparish_IDChanging(value);
					this.SendPropertyChanging();
					this._parish_ID = value;
					this.SendPropertyChanged("parish_ID");
					this.Onparish_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emp_ID", DbType="Int")]
		public System.Nullable<int> emp_ID
		{
			get
			{
				return this._emp_ID;
			}
			set
			{
				if ((this._emp_ID != value))
				{
					this.Onemp_IDChanging(value);
					this.SendPropertyChanging();
					this._emp_ID = value;
					this.SendPropertyChanged("emp_ID");
					this.Onemp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isResolved", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string isResolved
		{
			get
			{
				return this._isResolved;
			}
			set
			{
				if ((this._isResolved != value))
				{
					this.OnisResolvedChanging(value);
					this.SendPropertyChanging();
					this._isResolved = value;
					this.SendPropertyChanged("isResolved");
					this.OnisResolvedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sub_Id", DbType="Int NOT NULL")]
		public int sub_Id
		{
			get
			{
				return this._sub_Id;
			}
			set
			{
				if ((this._sub_Id != value))
				{
					if (this._Subcategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsub_IdChanging(value);
					this.SendPropertyChanging();
					this._sub_Id = value;
					this.SendPropertyChanged("sub_Id");
					this.Onsub_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_track_no", DbType="Int NOT NULL")]
		public int track_no
		{
			get
			{
				return this._track_no;
			}
			set
			{
				if ((this._track_no != value))
				{
					this.Ontrack_noChanging(value);
					this.SendPropertyChanging();
					this._track_no = value;
					this.SendPropertyChanged("track_no");
					this.Ontrack_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="NVarChar(50)")]
		public string Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_submitted_By", DbType="NVarChar(50)")]
		public string submitted_By
		{
			get
			{
				return this._submitted_By;
			}
			set
			{
				if ((this._submitted_By != value))
				{
					this.Onsubmitted_ByChanging(value);
					this.SendPropertyChanging();
					this._submitted_By = value;
					this.SendPropertyChanged("submitted_By");
					this.Onsubmitted_ByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResolvedConfirmed", DbType="Int")]
		public System.Nullable<int> ResolvedConfirmed
		{
			get
			{
				return this._ResolvedConfirmed;
			}
			set
			{
				if ((this._ResolvedConfirmed != value))
				{
					this.OnResolvedConfirmedChanging(value);
					this.SendPropertyChanging();
					this._ResolvedConfirmed = value;
					this.SendPropertyChanged("ResolvedConfirmed");
					this.OnResolvedConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResolvedConfirmed_BY", DbType="Int")]
		public System.Nullable<int> ResolvedConfirmed_BY
		{
			get
			{
				return this._ResolvedConfirmed_BY;
			}
			set
			{
				if ((this._ResolvedConfirmed_BY != value))
				{
					this.OnResolvedConfirmed_BYChanging(value);
					this.SendPropertyChanging();
					this._ResolvedConfirmed_BY = value;
					this.SendPropertyChanged("ResolvedConfirmed_BY");
					this.OnResolvedConfirmed_BYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Complaint_Workorder", Storage="_Workorders", ThisKey="comp_ID", OtherKey="comp_ID")]
		public EntitySet<Workorder> Workorders
		{
			get
			{
				return this._Workorders;
			}
			set
			{
				this._Workorders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Complaint_Inbox", Storage="_Inboxes", ThisKey="comp_ID", OtherKey="comp_ID")]
		public EntitySet<Inbox> Inboxes
		{
			get
			{
				return this._Inboxes;
			}
			set
			{
				this._Inboxes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Complaint_Remark", Storage="_Remarks", ThisKey="comp_ID", OtherKey="comp_ID")]
		public EntitySet<Remark> Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				this._Remarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Complaint_Sent", Storage="_Sents", ThisKey="comp_ID", OtherKey="comp_ID")]
		public EntitySet<Sent> Sents
		{
			get
			{
				return this._Sents;
			}
			set
			{
				this._Sents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Complaint", Storage="_Customer", ThisKey="cus_ID", OtherKey="cus_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Complaints.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Complaints.Add(this);
						this._cus_ID = value.cus_ID;
					}
					else
					{
						this._cus_ID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parish_Complaint", Storage="_Parish", ThisKey="parish_ID", OtherKey="parish_ID", IsForeignKey=true)]
		public Parish Parish
		{
			get
			{
				return this._Parish.Entity;
			}
			set
			{
				Parish previousValue = this._Parish.Entity;
				if (((previousValue != value) 
							|| (this._Parish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parish.Entity = null;
						previousValue.Complaints.Remove(this);
					}
					this._Parish.Entity = value;
					if ((value != null))
					{
						value.Complaints.Add(this);
						this._parish_ID = value.parish_ID;
					}
					else
					{
						this._parish_ID = default(int);
					}
					this.SendPropertyChanged("Parish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subcategory_Complaint", Storage="_Subcategory", ThisKey="sub_Id", OtherKey="sub_Id", IsForeignKey=true)]
		public Subcategory Subcategory
		{
			get
			{
				return this._Subcategory.Entity;
			}
			set
			{
				Subcategory previousValue = this._Subcategory.Entity;
				if (((previousValue != value) 
							|| (this._Subcategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subcategory.Entity = null;
						previousValue.Complaints.Remove(this);
					}
					this._Subcategory.Entity = value;
					if ((value != null))
					{
						value.Complaints.Add(this);
						this._sub_Id = value.sub_Id;
					}
					else
					{
						this._sub_Id = default(int);
					}
					this.SendPropertyChanged("Subcategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workorders(Workorder entity)
		{
			this.SendPropertyChanging();
			entity.Complaint = this;
		}
		
		private void detach_Workorders(Workorder entity)
		{
			this.SendPropertyChanging();
			entity.Complaint = null;
		}
		
		private void attach_Inboxes(Inbox entity)
		{
			this.SendPropertyChanging();
			entity.Complaint = this;
		}
		
		private void detach_Inboxes(Inbox entity)
		{
			this.SendPropertyChanging();
			entity.Complaint = null;
		}
		
		private void attach_Remarks(Remark entity)
		{
			this.SendPropertyChanging();
			entity.Complaint = this;
		}
		
		private void detach_Remarks(Remark entity)
		{
			this.SendPropertyChanging();
			entity.Complaint = null;
		}
		
		private void attach_Sents(Sent entity)
		{
			this.SendPropertyChanging();
			entity.Complaint = this;
		}
		
		private void detach_Sents(Sent entity)
		{
			this.SendPropertyChanging();
			entity.Complaint = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _contact_ID;
		
		private string _Detail;
		
		private int _type_ID;
		
		private System.Nullable<int> _emp_ID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Type> _Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncontact_IDChanging(int value);
    partial void Oncontact_IDChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    partial void Ontype_IDChanging(int value);
    partial void Ontype_IDChanged();
    partial void Onemp_IDChanging(System.Nullable<int> value);
    partial void Onemp_IDChanged();
    #endregion
		
		public Contact()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Type = default(EntityRef<Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contact_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int contact_ID
		{
			get
			{
				return this._contact_ID;
			}
			set
			{
				if ((this._contact_ID != value))
				{
					this.Oncontact_IDChanging(value);
					this.SendPropertyChanging();
					this._contact_ID = value;
					this.SendPropertyChanged("contact_ID");
					this.Oncontact_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type_ID", DbType="Int NOT NULL")]
		public int type_ID
		{
			get
			{
				return this._type_ID;
			}
			set
			{
				if ((this._type_ID != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontype_IDChanging(value);
					this.SendPropertyChanging();
					this._type_ID = value;
					this.SendPropertyChanged("type_ID");
					this.Ontype_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emp_ID", DbType="Int")]
		public System.Nullable<int> emp_ID
		{
			get
			{
				return this._emp_ID;
			}
			set
			{
				if ((this._emp_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onemp_IDChanging(value);
					this.SendPropertyChanging();
					this._emp_ID = value;
					this.SendPropertyChanged("emp_ID");
					this.Onemp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Contact", Storage="_Employee", ThisKey="emp_ID", OtherKey="emp_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._emp_ID = value.emp_ID;
					}
					else
					{
						this._emp_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Contact", Storage="_Type", ThisKey="type_ID", OtherKey="type_ID", IsForeignKey=true)]
		public Type Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				Type previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._type_ID = value.type_ID;
					}
					else
					{
						this._type_ID = default(int);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cus_ID;
		
		private string _firstName;
		
		private string _lastName;
		
		private string _email;
		
		private string _contact_No;
		
		private EntitySet<Complaint> _Complaints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncus_IDChanging(int value);
    partial void Oncus_IDChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Oncontact_NoChanging(string value);
    partial void Oncontact_NoChanged();
    #endregion
		
		public Customer()
		{
			this._Complaints = new EntitySet<Complaint>(new Action<Complaint>(this.attach_Complaints), new Action<Complaint>(this.detach_Complaints));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cus_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cus_ID
		{
			get
			{
				return this._cus_ID;
			}
			set
			{
				if ((this._cus_ID != value))
				{
					this.Oncus_IDChanging(value);
					this.SendPropertyChanging();
					this._cus_ID = value;
					this.SendPropertyChanged("cus_ID");
					this.Oncus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contact_No", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string contact_No
		{
			get
			{
				return this._contact_No;
			}
			set
			{
				if ((this._contact_No != value))
				{
					this.Oncontact_NoChanging(value);
					this.SendPropertyChanging();
					this._contact_No = value;
					this.SendPropertyChanged("contact_No");
					this.Oncontact_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Complaint", Storage="_Complaints", ThisKey="cus_ID", OtherKey="cus_ID")]
		public EntitySet<Complaint> Complaints
		{
			get
			{
				return this._Complaints;
			}
			set
			{
				this._Complaints.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Complaints(Complaint entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Complaints(Complaint entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _dep_Id;
		
		private string _dep_Name;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondep_IdChanging(int value);
    partial void Ondep_IdChanged();
    partial void Ondep_NameChanging(string value);
    partial void Ondep_NameChanged();
    #endregion
		
		public Department()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dep_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int dep_Id
		{
			get
			{
				return this._dep_Id;
			}
			set
			{
				if ((this._dep_Id != value))
				{
					this.Ondep_IdChanging(value);
					this.SendPropertyChanging();
					this._dep_Id = value;
					this.SendPropertyChanged("dep_Id");
					this.Ondep_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dep_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string dep_Name
		{
			get
			{
				return this._dep_Name;
			}
			set
			{
				if ((this._dep_Name != value))
				{
					this.Ondep_NameChanging(value);
					this.SendPropertyChanging();
					this._dep_Name = value;
					this.SendPropertyChanged("dep_Name");
					this.Ondep_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Category", Storage="_Categories", ThisKey="dep_Id", OtherKey="dep_Id")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Employees", ThisKey="dep_Id", OtherKey="dep_Id")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _emp_ID;
		
		private string _firstName;
		
		private string _lastName;
		
		private string _email;
		
		private string _Tel;
		
		private string _title;
		
		private int _dep_Id;
		
		private string @__role;
		
		private EntitySet<acknowledged> _acknowledgeds;
		
		private EntitySet<Workorder> _Workorders;
		
		private EntitySet<approved_By> _approved_Bies;
		
		private EntitySet<Contact> _Contacts;
		
		private EntitySet<log> _logs;
		
		private EntitySet<Remark> _Remarks;
		
		private EntitySet<Sent> _Sents;
		
		private EntitySet<Sent> _Sents1;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onemp_IDChanging(int value);
    partial void Onemp_IDChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void Ondep_IdChanging(int value);
    partial void Ondep_IdChanged();
    partial void On_roleChanging(string value);
    partial void On_roleChanged();
    #endregion
		
		public Employee()
		{
			this._acknowledgeds = new EntitySet<acknowledged>(new Action<acknowledged>(this.attach_acknowledgeds), new Action<acknowledged>(this.detach_acknowledgeds));
			this._Workorders = new EntitySet<Workorder>(new Action<Workorder>(this.attach_Workorders), new Action<Workorder>(this.detach_Workorders));
			this._approved_Bies = new EntitySet<approved_By>(new Action<approved_By>(this.attach_approved_Bies), new Action<approved_By>(this.detach_approved_Bies));
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._logs = new EntitySet<log>(new Action<log>(this.attach_logs), new Action<log>(this.detach_logs));
			this._Remarks = new EntitySet<Remark>(new Action<Remark>(this.attach_Remarks), new Action<Remark>(this.detach_Remarks));
			this._Sents = new EntitySet<Sent>(new Action<Sent>(this.attach_Sents), new Action<Sent>(this.detach_Sents));
			this._Sents1 = new EntitySet<Sent>(new Action<Sent>(this.attach_Sents1), new Action<Sent>(this.detach_Sents1));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emp_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int emp_ID
		{
			get
			{
				return this._emp_ID;
			}
			set
			{
				if ((this._emp_ID != value))
				{
					this.Onemp_IDChanging(value);
					this.SendPropertyChanging();
					this._emp_ID = value;
					this.SendPropertyChanged("emp_ID");
					this.Onemp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dep_Id", DbType="Int NOT NULL")]
		public int dep_Id
		{
			get
			{
				return this._dep_Id;
			}
			set
			{
				if ((this._dep_Id != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondep_IdChanging(value);
					this.SendPropertyChanging();
					this._dep_Id = value;
					this.SendPropertyChanged("dep_Id");
					this.Ondep_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_role]", Storage="__role", DbType="NVarChar(50)")]
		public string _role
		{
			get
			{
				return this.@__role;
			}
			set
			{
				if ((this.@__role != value))
				{
					this.On_roleChanging(value);
					this.SendPropertyChanging();
					this.@__role = value;
					this.SendPropertyChanged("_role");
					this.On_roleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_acknowledged", Storage="_acknowledgeds", ThisKey="emp_ID", OtherKey="emp_ID")]
		public EntitySet<acknowledged> acknowledgeds
		{
			get
			{
				return this._acknowledgeds;
			}
			set
			{
				this._acknowledgeds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Workorder", Storage="_Workorders", ThisKey="emp_ID", OtherKey="emp_ID")]
		public EntitySet<Workorder> Workorders
		{
			get
			{
				return this._Workorders;
			}
			set
			{
				this._Workorders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_approved_By", Storage="_approved_Bies", ThisKey="emp_ID", OtherKey="emp_ID")]
		public EntitySet<approved_By> approved_Bies
		{
			get
			{
				return this._approved_Bies;
			}
			set
			{
				this._approved_Bies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Contact", Storage="_Contacts", ThisKey="emp_ID", OtherKey="emp_ID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_log", Storage="_logs", ThisKey="emp_ID", OtherKey="emp_ID")]
		public EntitySet<log> logs
		{
			get
			{
				return this._logs;
			}
			set
			{
				this._logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Remark", Storage="_Remarks", ThisKey="emp_ID", OtherKey="emp_ID")]
		public EntitySet<Remark> Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				this._Remarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Sent", Storage="_Sents", ThisKey="emp_ID", OtherKey="From")]
		public EntitySet<Sent> Sents
		{
			get
			{
				return this._Sents;
			}
			set
			{
				this._Sents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Sent1", Storage="_Sents1", ThisKey="emp_ID", OtherKey="To")]
		public EntitySet<Sent> Sents1
		{
			get
			{
				return this._Sents1;
			}
			set
			{
				this._Sents1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Department", ThisKey="dep_Id", OtherKey="dep_Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._dep_Id = value.dep_Id;
					}
					else
					{
						this._dep_Id = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_acknowledgeds(acknowledged entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_acknowledgeds(acknowledged entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Workorders(Workorder entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Workorders(Workorder entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_approved_Bies(approved_By entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_approved_Bies(approved_By entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_logs(log entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_logs(log entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Remarks(Remark entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Remarks(Remark entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Sents(Sent entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Sents(Sent entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Sents1(Sent entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Sents1(Sent entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inbox")]
	public partial class Inbox : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _inbox_ID;
		
		private int _comp_ID;
		
		private System.DateTime _date_recieved;
		
		private string @__role;
		
		private EntitySet<acknowledged> _acknowledgeds;
		
		private EntityRef<Complaint> _Complaint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oninbox_IDChanging(int value);
    partial void Oninbox_IDChanged();
    partial void Oncomp_IDChanging(int value);
    partial void Oncomp_IDChanged();
    partial void Ondate_recievedChanging(System.DateTime value);
    partial void Ondate_recievedChanged();
    partial void On_roleChanging(string value);
    partial void On_roleChanged();
    #endregion
		
		public Inbox()
		{
			this._acknowledgeds = new EntitySet<acknowledged>(new Action<acknowledged>(this.attach_acknowledgeds), new Action<acknowledged>(this.detach_acknowledgeds));
			this._Complaint = default(EntityRef<Complaint>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inbox_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int inbox_ID
		{
			get
			{
				return this._inbox_ID;
			}
			set
			{
				if ((this._inbox_ID != value))
				{
					this.Oninbox_IDChanging(value);
					this.SendPropertyChanging();
					this._inbox_ID = value;
					this.SendPropertyChanged("inbox_ID");
					this.Oninbox_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comp_ID", DbType="Int NOT NULL")]
		public int comp_ID
		{
			get
			{
				return this._comp_ID;
			}
			set
			{
				if ((this._comp_ID != value))
				{
					if (this._Complaint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncomp_IDChanging(value);
					this.SendPropertyChanging();
					this._comp_ID = value;
					this.SendPropertyChanged("comp_ID");
					this.Oncomp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_recieved", DbType="SmallDateTime NOT NULL")]
		public System.DateTime date_recieved
		{
			get
			{
				return this._date_recieved;
			}
			set
			{
				if ((this._date_recieved != value))
				{
					this.Ondate_recievedChanging(value);
					this.SendPropertyChanging();
					this._date_recieved = value;
					this.SendPropertyChanged("date_recieved");
					this.Ondate_recievedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_role]", Storage="__role", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string _role
		{
			get
			{
				return this.@__role;
			}
			set
			{
				if ((this.@__role != value))
				{
					this.On_roleChanging(value);
					this.SendPropertyChanging();
					this.@__role = value;
					this.SendPropertyChanged("_role");
					this.On_roleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inbox_acknowledged", Storage="_acknowledgeds", ThisKey="inbox_ID", OtherKey="inbox_ID")]
		public EntitySet<acknowledged> acknowledgeds
		{
			get
			{
				return this._acknowledgeds;
			}
			set
			{
				this._acknowledgeds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Complaint_Inbox", Storage="_Complaint", ThisKey="comp_ID", OtherKey="comp_ID", IsForeignKey=true)]
		public Complaint Complaint
		{
			get
			{
				return this._Complaint.Entity;
			}
			set
			{
				Complaint previousValue = this._Complaint.Entity;
				if (((previousValue != value) 
							|| (this._Complaint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Complaint.Entity = null;
						previousValue.Inboxes.Remove(this);
					}
					this._Complaint.Entity = value;
					if ((value != null))
					{
						value.Inboxes.Add(this);
						this._comp_ID = value.comp_ID;
					}
					else
					{
						this._comp_ID = default(int);
					}
					this.SendPropertyChanged("Complaint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_acknowledgeds(acknowledged entity)
		{
			this.SendPropertyChanging();
			entity.Inbox = this;
		}
		
		private void detach_acknowledgeds(acknowledged entity)
		{
			this.SendPropertyChanging();
			entity.Inbox = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Item_ID;
		
		private string _item1;
		
		private string _Description;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _unit_ID;
		
		private System.Nullable<decimal> _Rate;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<int> _workorder_Id;
		
		private System.Nullable<bool> _inStore;
		
		private EntityRef<Workorder> _Workorder;
		
		private EntityRef<Unit> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItem_IDChanging(int value);
    partial void OnItem_IDChanged();
    partial void Onitem1Changing(string value);
    partial void Onitem1Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void Onunit_IDChanging(System.Nullable<int> value);
    partial void Onunit_IDChanged();
    partial void OnRateChanging(System.Nullable<decimal> value);
    partial void OnRateChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void Onworkorder_IdChanging(System.Nullable<int> value);
    partial void Onworkorder_IdChanged();
    partial void OninStoreChanging(System.Nullable<bool> value);
    partial void OninStoreChanged();
    #endregion
		
		public Item()
		{
			this._Workorder = default(EntityRef<Workorder>);
			this._Unit = default(EntityRef<Unit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Item_ID
		{
			get
			{
				return this._Item_ID;
			}
			set
			{
				if ((this._Item_ID != value))
				{
					this.OnItem_IDChanging(value);
					this.SendPropertyChanging();
					this._Item_ID = value;
					this.SendPropertyChanged("Item_ID");
					this.OnItem_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="item", Storage="_item1", DbType="NVarChar(150)")]
		public string item1
		{
			get
			{
				return this._item1;
			}
			set
			{
				if ((this._item1 != value))
				{
					this.Onitem1Changing(value);
					this.SendPropertyChanging();
					this._item1 = value;
					this.SendPropertyChanged("item1");
					this.Onitem1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unit_ID", DbType="Int")]
		public System.Nullable<int> unit_ID
		{
			get
			{
				return this._unit_ID;
			}
			set
			{
				if ((this._unit_ID != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onunit_IDChanging(value);
					this.SendPropertyChanging();
					this._unit_ID = value;
					this.SendPropertyChanged("unit_ID");
					this.Onunit_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workorder_Id", DbType="Int")]
		public System.Nullable<int> workorder_Id
		{
			get
			{
				return this._workorder_Id;
			}
			set
			{
				if ((this._workorder_Id != value))
				{
					if (this._Workorder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onworkorder_IdChanging(value);
					this.SendPropertyChanging();
					this._workorder_Id = value;
					this.SendPropertyChanged("workorder_Id");
					this.Onworkorder_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inStore", DbType="Bit")]
		public System.Nullable<bool> inStore
		{
			get
			{
				return this._inStore;
			}
			set
			{
				if ((this._inStore != value))
				{
					this.OninStoreChanging(value);
					this.SendPropertyChanging();
					this._inStore = value;
					this.SendPropertyChanged("inStore");
					this.OninStoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workorder_Item", Storage="_Workorder", ThisKey="workorder_Id", OtherKey="workorder_Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Workorder Workorder
		{
			get
			{
				return this._Workorder.Entity;
			}
			set
			{
				Workorder previousValue = this._Workorder.Entity;
				if (((previousValue != value) 
							|| (this._Workorder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workorder.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Workorder.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._workorder_Id = value.workorder_Id;
					}
					else
					{
						this._workorder_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Workorder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Item", Storage="_Unit", ThisKey="unit_ID", OtherKey="unit_ID", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._unit_ID = value.unit_ID;
					}
					else
					{
						this._unit_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[log]")]
	public partial class log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _emp_ID;
		
		private System.Nullable<System.DateTime> _date_recieved;
		
		private string _Description;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Onemp_IDChanging(int value);
    partial void Onemp_IDChanged();
    partial void Ondate_recievedChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_recievedChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public log()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emp_ID", DbType="Int NOT NULL")]
		public int emp_ID
		{
			get
			{
				return this._emp_ID;
			}
			set
			{
				if ((this._emp_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onemp_IDChanging(value);
					this.SendPropertyChanging();
					this._emp_ID = value;
					this.SendPropertyChanged("emp_ID");
					this.Onemp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_recieved", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> date_recieved
		{
			get
			{
				return this._date_recieved;
			}
			set
			{
				if ((this._date_recieved != value))
				{
					this.Ondate_recievedChanging(value);
					this.SendPropertyChanging();
					this._date_recieved = value;
					this.SendPropertyChanged("date_recieved");
					this.Ondate_recievedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_log", Storage="_Employee", ThisKey="emp_ID", OtherKey="emp_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.logs.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.logs.Add(this);
						this._emp_ID = value.emp_ID;
					}
					else
					{
						this._emp_ID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parish")]
	public partial class Parish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _parish_ID;
		
		private string _parish1;
		
		private EntitySet<Workorder> _Workorders;
		
		private EntitySet<Complaint> _Complaints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onparish_IDChanging(int value);
    partial void Onparish_IDChanged();
    partial void Onparish1Changing(string value);
    partial void Onparish1Changed();
    #endregion
		
		public Parish()
		{
			this._Workorders = new EntitySet<Workorder>(new Action<Workorder>(this.attach_Workorders), new Action<Workorder>(this.detach_Workorders));
			this._Complaints = new EntitySet<Complaint>(new Action<Complaint>(this.attach_Complaints), new Action<Complaint>(this.detach_Complaints));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parish_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int parish_ID
		{
			get
			{
				return this._parish_ID;
			}
			set
			{
				if ((this._parish_ID != value))
				{
					this.Onparish_IDChanging(value);
					this.SendPropertyChanging();
					this._parish_ID = value;
					this.SendPropertyChanged("parish_ID");
					this.Onparish_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="parish", Storage="_parish1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string parish1
		{
			get
			{
				return this._parish1;
			}
			set
			{
				if ((this._parish1 != value))
				{
					this.Onparish1Changing(value);
					this.SendPropertyChanging();
					this._parish1 = value;
					this.SendPropertyChanged("parish1");
					this.Onparish1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parish_Workorder", Storage="_Workorders", ThisKey="parish_ID", OtherKey="Parish_ID")]
		public EntitySet<Workorder> Workorders
		{
			get
			{
				return this._Workorders;
			}
			set
			{
				this._Workorders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parish_Complaint", Storage="_Complaints", ThisKey="parish_ID", OtherKey="parish_ID")]
		public EntitySet<Complaint> Complaints
		{
			get
			{
				return this._Complaints;
			}
			set
			{
				this._Complaints.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workorders(Workorder entity)
		{
			this.SendPropertyChanging();
			entity.Parish = this;
		}
		
		private void detach_Workorders(Workorder entity)
		{
			this.SendPropertyChanging();
			entity.Parish = null;
		}
		
		private void attach_Complaints(Complaint entity)
		{
			this.SendPropertyChanging();
			entity.Parish = this;
		}
		
		private void detach_Complaints(Complaint entity)
		{
			this.SendPropertyChanging();
			entity.Parish = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Remarks")]
	public partial class Remark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _emp_ID;
		
		private int _comp_ID;
		
		private System.DateTime _date_recieved;
		
		private string _Remark1;
		
		private EntityRef<Complaint> _Complaint;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Onemp_IDChanging(int value);
    partial void Onemp_IDChanged();
    partial void Oncomp_IDChanging(int value);
    partial void Oncomp_IDChanged();
    partial void Ondate_recievedChanging(System.DateTime value);
    partial void Ondate_recievedChanged();
    partial void OnRemark1Changing(string value);
    partial void OnRemark1Changed();
    #endregion
		
		public Remark()
		{
			this._Complaint = default(EntityRef<Complaint>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emp_ID", DbType="Int NOT NULL")]
		public int emp_ID
		{
			get
			{
				return this._emp_ID;
			}
			set
			{
				if ((this._emp_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onemp_IDChanging(value);
					this.SendPropertyChanging();
					this._emp_ID = value;
					this.SendPropertyChanged("emp_ID");
					this.Onemp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comp_ID", DbType="Int NOT NULL")]
		public int comp_ID
		{
			get
			{
				return this._comp_ID;
			}
			set
			{
				if ((this._comp_ID != value))
				{
					if (this._Complaint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncomp_IDChanging(value);
					this.SendPropertyChanging();
					this._comp_ID = value;
					this.SendPropertyChanged("comp_ID");
					this.Oncomp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_recieved", DbType="SmallDateTime NOT NULL")]
		public System.DateTime date_recieved
		{
			get
			{
				return this._date_recieved;
			}
			set
			{
				if ((this._date_recieved != value))
				{
					this.Ondate_recievedChanging(value);
					this.SendPropertyChanging();
					this._date_recieved = value;
					this.SendPropertyChanged("date_recieved");
					this.Ondate_recievedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Remark", Storage="_Remark1", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Remark1
		{
			get
			{
				return this._Remark1;
			}
			set
			{
				if ((this._Remark1 != value))
				{
					this.OnRemark1Changing(value);
					this.SendPropertyChanging();
					this._Remark1 = value;
					this.SendPropertyChanged("Remark1");
					this.OnRemark1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Complaint_Remark", Storage="_Complaint", ThisKey="comp_ID", OtherKey="comp_ID", IsForeignKey=true)]
		public Complaint Complaint
		{
			get
			{
				return this._Complaint.Entity;
			}
			set
			{
				Complaint previousValue = this._Complaint.Entity;
				if (((previousValue != value) 
							|| (this._Complaint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Complaint.Entity = null;
						previousValue.Remarks.Remove(this);
					}
					this._Complaint.Entity = value;
					if ((value != null))
					{
						value.Remarks.Add(this);
						this._comp_ID = value.comp_ID;
					}
					else
					{
						this._comp_ID = default(int);
					}
					this.SendPropertyChanged("Complaint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Remark", Storage="_Employee", ThisKey="emp_ID", OtherKey="emp_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Remarks.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Remarks.Add(this);
						this._emp_ID = value.emp_ID;
					}
					else
					{
						this._emp_ID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sent")]
	public partial class Sent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _From;
		
		private int _To;
		
		private int _comp_ID;
		
		private System.DateTime _date_recieved;
		
		private EntityRef<Complaint> _Complaint;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFromChanging(int value);
    partial void OnFromChanged();
    partial void OnToChanging(int value);
    partial void OnToChanged();
    partial void Oncomp_IDChanging(int value);
    partial void Oncomp_IDChanged();
    partial void Ondate_recievedChanging(System.DateTime value);
    partial void Ondate_recievedChanged();
    #endregion
		
		public Sent()
		{
			this._Complaint = default(EntityRef<Complaint>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="Int NOT NULL")]
		public int From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="Int NOT NULL")]
		public int To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comp_ID", DbType="Int NOT NULL")]
		public int comp_ID
		{
			get
			{
				return this._comp_ID;
			}
			set
			{
				if ((this._comp_ID != value))
				{
					if (this._Complaint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncomp_IDChanging(value);
					this.SendPropertyChanging();
					this._comp_ID = value;
					this.SendPropertyChanged("comp_ID");
					this.Oncomp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_recieved", DbType="SmallDateTime NOT NULL")]
		public System.DateTime date_recieved
		{
			get
			{
				return this._date_recieved;
			}
			set
			{
				if ((this._date_recieved != value))
				{
					this.Ondate_recievedChanging(value);
					this.SendPropertyChanging();
					this._date_recieved = value;
					this.SendPropertyChanged("date_recieved");
					this.Ondate_recievedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Complaint_Sent", Storage="_Complaint", ThisKey="comp_ID", OtherKey="comp_ID", IsForeignKey=true)]
		public Complaint Complaint
		{
			get
			{
				return this._Complaint.Entity;
			}
			set
			{
				Complaint previousValue = this._Complaint.Entity;
				if (((previousValue != value) 
							|| (this._Complaint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Complaint.Entity = null;
						previousValue.Sents.Remove(this);
					}
					this._Complaint.Entity = value;
					if ((value != null))
					{
						value.Sents.Add(this);
						this._comp_ID = value.comp_ID;
					}
					else
					{
						this._comp_ID = default(int);
					}
					this.SendPropertyChanged("Complaint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Sent", Storage="_Employee", ThisKey="From", OtherKey="emp_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Sents.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Sents.Add(this);
						this._From = value.emp_ID;
					}
					else
					{
						this._From = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Sent1", Storage="_Employee1", ThisKey="To", OtherKey="emp_ID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Sents1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Sents1.Add(this);
						this._To = value.emp_ID;
					}
					else
					{
						this._To = default(int);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subcategory")]
	public partial class Subcategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sub_Id;
		
		private string _sub_Name;
		
		private int _cat_Id;
		
		private EntitySet<Complaint> _Complaints;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsub_IdChanging(int value);
    partial void Onsub_IdChanged();
    partial void Onsub_NameChanging(string value);
    partial void Onsub_NameChanged();
    partial void Oncat_IdChanging(int value);
    partial void Oncat_IdChanged();
    #endregion
		
		public Subcategory()
		{
			this._Complaints = new EntitySet<Complaint>(new Action<Complaint>(this.attach_Complaints), new Action<Complaint>(this.detach_Complaints));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sub_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sub_Id
		{
			get
			{
				return this._sub_Id;
			}
			set
			{
				if ((this._sub_Id != value))
				{
					this.Onsub_IdChanging(value);
					this.SendPropertyChanging();
					this._sub_Id = value;
					this.SendPropertyChanged("sub_Id");
					this.Onsub_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sub_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string sub_Name
		{
			get
			{
				return this._sub_Name;
			}
			set
			{
				if ((this._sub_Name != value))
				{
					this.Onsub_NameChanging(value);
					this.SendPropertyChanging();
					this._sub_Name = value;
					this.SendPropertyChanged("sub_Name");
					this.Onsub_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cat_Id", DbType="Int NOT NULL")]
		public int cat_Id
		{
			get
			{
				return this._cat_Id;
			}
			set
			{
				if ((this._cat_Id != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncat_IdChanging(value);
					this.SendPropertyChanging();
					this._cat_Id = value;
					this.SendPropertyChanged("cat_Id");
					this.Oncat_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subcategory_Complaint", Storage="_Complaints", ThisKey="sub_Id", OtherKey="sub_Id")]
		public EntitySet<Complaint> Complaints
		{
			get
			{
				return this._Complaints;
			}
			set
			{
				this._Complaints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Subcategory", Storage="_Category", ThisKey="cat_Id", OtherKey="cat_Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Subcategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Subcategories.Add(this);
						this._cat_Id = value.cat_Id;
					}
					else
					{
						this._cat_Id = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Complaints(Complaint entity)
		{
			this.SendPropertyChanging();
			entity.Subcategory = this;
		}
		
		private void detach_Complaints(Complaint entity)
		{
			this.SendPropertyChanging();
			entity.Subcategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Type")]
	public partial class Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _type_ID;
		
		private string _typName;
		
		private EntitySet<Contact> _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontype_IDChanging(int value);
    partial void Ontype_IDChanged();
    partial void OntypNameChanging(string value);
    partial void OntypNameChanged();
    #endregion
		
		public Type()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int type_ID
		{
			get
			{
				return this._type_ID;
			}
			set
			{
				if ((this._type_ID != value))
				{
					this.Ontype_IDChanging(value);
					this.SendPropertyChanging();
					this._type_ID = value;
					this.SendPropertyChanged("type_ID");
					this.Ontype_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string typName
		{
			get
			{
				return this._typName;
			}
			set
			{
				if ((this._typName != value))
				{
					this.OntypNameChanging(value);
					this.SendPropertyChanging();
					this._typName = value;
					this.SendPropertyChanged("typName");
					this.OntypNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Contact", Storage="_Contacts", ThisKey="type_ID", OtherKey="type_ID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Unit")]
	public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _unit_ID;
		
		private string _Name;
		
		private string _Unit1;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onunit_IDChanging(int value);
    partial void Onunit_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnit1Changing(string value);
    partial void OnUnit1Changed();
    #endregion
		
		public Unit()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unit_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int unit_ID
		{
			get
			{
				return this._unit_ID;
			}
			set
			{
				if ((this._unit_ID != value))
				{
					this.Onunit_IDChanging(value);
					this.SendPropertyChanging();
					this._unit_ID = value;
					this.SendPropertyChanged("unit_ID");
					this.Onunit_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Unit", Storage="_Unit1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Unit1
		{
			get
			{
				return this._Unit1;
			}
			set
			{
				if ((this._Unit1 != value))
				{
					this.OnUnit1Changing(value);
					this.SendPropertyChanging();
					this._Unit1 = value;
					this.SendPropertyChanged("Unit1");
					this.OnUnit1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Item", Storage="_Items", ThisKey="unit_ID", OtherKey="unit_ID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
	}
	
	public partial class seen_WhoResult
	{
		
		private string _firstName;
		
		private string _lastName;
		
		private string @__role;
		
		private string _dep_Name;
		
		private string _title;
		
		private System.Nullable<System.DateTime> _date_seen;
		
		public seen_WhoResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this._firstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this._lastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_role]", Storage="__role", DbType="NVarChar(50)")]
		public string _role
		{
			get
			{
				return this.@__role;
			}
			set
			{
				if ((this.@__role != value))
				{
					this.@__role = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dep_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string dep_Name
		{
			get
			{
				return this._dep_Name;
			}
			set
			{
				if ((this._dep_Name != value))
				{
					this._dep_Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this._title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_seen", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> date_seen
		{
			get
			{
				return this._date_seen;
			}
			set
			{
				if ((this._date_seen != value))
				{
					this._date_seen = value;
				}
			}
		}
	}
	
	public partial class resolved_WhoResult
	{
		
		private string _emp_Name;
		
		private string @__role;
		
		private string _title;
		
		private System.Nullable<System.DateTime> _date_resolved;
		
		public resolved_WhoResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emp_Name", DbType="NVarChar(101) NOT NULL", CanBeNull=false)]
		public string emp_Name
		{
			get
			{
				return this._emp_Name;
			}
			set
			{
				if ((this._emp_Name != value))
				{
					this._emp_Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_role]", Storage="__role", DbType="NVarChar(50)")]
		public string _role
		{
			get
			{
				return this.@__role;
			}
			set
			{
				if ((this.@__role != value))
				{
					this.@__role = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(154) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this._title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_resolved", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> date_resolved
		{
			get
			{
				return this._date_resolved;
			}
			set
			{
				if ((this._date_resolved != value))
				{
					this._date_resolved = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
